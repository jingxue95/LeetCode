class Solution {
    private void dfs(int[] candidates, int target, List<Integer> list, List<List<Integer>> result, int sum, int pos){
        if(sum == target){
            result.add(list);
            return;
        }else if(sum > target){
            
            return;
        }
        for(int i = pos; i < candidates.length; i++){
            List<Integer> newList = new ArrayList<Integer>(list);
            int temp = sum + candidates[i];
            pos = i;
            newList.add(candidates[i]);
            dfs(candidates, target, newList, result, temp, pos);
        }
        
    }
    
    
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> list = new ArrayList<Integer>();
        dfs(candidates, target, list, result, 0 ,0);
        return result;
        
    }
}
